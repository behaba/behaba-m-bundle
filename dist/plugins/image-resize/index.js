'use strict';

var _, async, gm, multimatch;

_ = require('lodash');

gm = require('gm');

async = require('async');

multimatch = require('multimatch');

module.exports = function (options) {
  var defaults;
  if (options == null) {
    options = {};
  }
  defaults = {
    pattern: ['**/*.png', '**/*.jpg', '**/*.jpeg', '**/*.gif'],
    width: 1024,
    height: null,
    exact: false
  };
  _.defaults(options, defaults);
  return function (files, metalsmith, next) {
    var calculateSize, filenames, getFormat, getSize, matched, outputImage, resizeFile, resizeImage;
    filenames = _.keys(files);
    matched = multimatch(filenames, options.pattern);
    getSize = function (file, image, meta, done) {
      return image.size(function (err, value) {
        _.assign(meta, value);
        return done(null, file, image, meta);
      });
    };
    getFormat = function (file, image, meta, done) {
      image.format(function (err, value) {
        return meta.format = value;
      });
      return done(null, file, image, meta);
    };
    calculateSize = function (file, image, meta, done) {
      meta.resizeNeeded = meta.width > options.width || meta.height > options.height;
      meta.resizeNeeded = meta.resizeNeeded || meta.exact;
      return done(null, file, image, meta);
    };
    resizeImage = function (file, image, meta, done) {
      if (meta.resizeNeeded && options.exact) {
        image.resize(options.width, options.height, "!");
      } else {
        image.resize(options.width, options.height, ">");
      }
      return done(null, file, image, meta);
    };
    outputImage = function (file, image, meta, done) {
      if (!meta.resizeNeeded) {
        done(null, file, image, meta);
      }
      return image.toBuffer(meta.format, function (err, buffer) {
        if (err != null) {
          done(err);
        }
        if (err == null) {
          file.contents = buffer;
        }
        return done(null, file, image, meta);
      });
    };
    resizeFile = function (filename, done) {
      var file, image, meta;
      file = files[filename];
      image = gm(file.contents, filename);
      meta = {};
      return async.waterfall([function (done) {
        return done(null, file, image, meta);
      }, getSize, getFormat, calculateSize, resizeImage, outputImage], done);
    };
    return async.each(matched, resizeFile, next);
  };
};

// ---
// generated by coffee-script 1.9.2